// src/pages/Home.jsx
import React, { useEffect, useState, useCallback, useRef } from 'react';
import { Link, useLocation } from 'react-router-dom';
import ProductGrid from '../components/ProductGrid';
import SectionHeader from '../components/SectionHeader';
import HeroSlider from '../components/HeroSlider';
import FilterBar from '../components/FilterBar';
import axiosClient from '../utils/axiosClient';
import { useFilter } from '../context/FilterContext';
import '../style/Home.css';
import khaiTruongHd from '../assets/hd/khai-truong-hd.jpg';
import sinhNhatHd from '../assets/hd/sinh-nhat-hd.jpg';
import tangLeHd from '../assets/hd/tang-le-hd.jpg';

// ƒê·ªãnh nghƒ©a th·ª© t·ª± hi·ªÉn th·ªã c·ªë ƒë·ªãnh
const CATEGORY_ORDER = ['khai-truong', 'sinh-nhat', 'tang-le'];

const Home = ({ addToCart }) => {
  const { filters, setFilters } = useFilter();
  const [productData, setProductData] = useState({});
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [resetSignal, setResetSignal] = useState(false);
  const isInitialMount = useRef(true);
  const location = useLocation();

  // Reset filters when navigating to Home page
  useEffect(() => {
    setFilters({ searchText: '', minPrice: null, maxPrice: null });
    setResetSignal(prev => !prev);
    window.scrollTo(0, 0);
  }, [location.pathname, setFilters]);

  // Fetch products t·ª´ API v·ªõi filters
  useEffect(() => {
    if (isInitialMount.current) {
      isInitialMount.current = false;
      setLoading(true);
    } else {
      setLoading(true);
    }

    setError(null);

    // Build query params
    const query = new URLSearchParams();
    if (filters.searchText) query.append('name', filters.searchText);
    if (filters.minPrice) query.append('minPrice', filters.minPrice);
    if (filters.maxPrice) query.append('maxPrice', filters.maxPrice);

    const url = query.toString()
      ? `/api/products/home?${query.toString()}`
      : '/api/products/home';

    axiosClient.get(url)
      .then(res => {
        setProductData(res.data);
        setLoading(false);
      })
      .catch(err => {
        console.error('‚ùå L·ªói khi l·∫•y s·∫£n ph·∫©m trang ch·ªß:', err);
        setError('Kh√¥ng th·ªÉ t·∫£i s·∫£n ph·∫©m. Vui l√≤ng th·ª≠ l·∫°i sau.');
        setLoading(false);
      });
  }, [filters]);

  const handleFilterChange = useCallback(({ searchText, minPrice, maxPrice }) => {
    setFilters({ searchText, minPrice, maxPrice });
  }, [setFilters]);

  // S·∫Øp x·∫øp categories theo th·ª© t·ª± c·ªë ƒë·ªãnh
  const getSortedCategories = () => {
    return CATEGORY_ORDER
      .map(slug => {
        if (productData[slug]) {
          return { slug, ...productData[slug] };
        }
        return null;
      })
      .filter(Boolean); // Lo·∫°i b·ªè null
  };

  // Ch·ªâ show loading l·∫ßn ƒë·∫ßu
  if (loading && isInitialMount.current) {
    return (
      <div className="loading-container">
        <div className="loading-spinner"></div>
        <p className="loading-text">ƒêang t·∫£i s·∫£n ph·∫©m...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="error-container">
        <div className="error-icon">‚ö†Ô∏è</div>
        <p className="error-text">{error}</p>
        <button className="retry-btn" onClick={() => window.location.reload()}>
          üîÑ Th·ª≠ l·∫°i
        </button>
      </div>
    );
  }

  const sortedCategories = getSortedCategories();
  const hasResults = sortedCategories.length > 0;

  return (
    <div className="home">
      {/* Hero Slider */}
      <HeroSlider />

      {/* Quick Categories */}
      <section className="quick-categories">
        <div className="container">
          <div className="quick-category-grid">
            <a href="/category/khai-truong" className="quick-category-card">
              <img src={khaiTruongHd} alt='Khai Tr∆∞∆°ng' className="quick-category-card-image" />
            </a>
            <a href="/category/sinh-nhat" className="quick-category-card">
              <img src={sinhNhatHd} alt='Sinh Nh·∫≠t' className="quick-category-card-image" />
            </a>
            <a href="/category/tang-le" className="quick-category-card">
              <img src={tangLeHd} alt='Tang L·ªÖ' className="quick-category-card-image" />
            </a>
          </div>
        </div>
      </section>

      {/* Filter Bar */}
      <div className="container">
        <div className="filter-section">
          <FilterBar
            key={`home-filter-${resetSignal}`}
            onFilterChange={handleFilterChange}
            initialSearch={filters.searchText || ''}
            initialPrice=""
            resetSignal={resetSignal}
          />
        </div>
      </div>

      {/* Products by Category - TH·ª® T·ª∞ C·ªê ƒê·ªäNH */}
      <div className="container">
        {loading && !isInitialMount.current ? (
          <div className="loading-inline">
            <div className="loading-spinner-small"></div>
            <p>ƒêang t√¨m ki·∫øm...</p>
          </div>
        ) : !hasResults ? (
          <div className="no-results">
            <div className="no-results-icon">üîç</div>
            <h3>Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m</h3>
            <p>Vui l√≤ng th·ª≠ t√¨m ki·∫øm v·ªõi t·ª´ kh√≥a kh√°c ho·∫∑c ƒëi·ªÅu ch·ªânh b·ªô l·ªçc</p>
          </div>
        ) : (
              sortedCategories.map(({ slug, label, products }) => (
                <section key={slug} className="category-section">
                  <SectionHeader title={label} link={`/category/${slug}`} />
                  <ProductGrid products={products} addToCart={addToCart} />
                  <Link to={`/category/${slug}`} className="view-more-button">Xem th√™m ‚Üí</Link>
                </section>
          ))
        )}
      </div>

      {/* Why Choose Us Section */}
      <section className="why-choose-us">
        <div className="container">
          <h2 className="section-title">T·∫°i Sao Ch·ªçn Ch√∫ng T√¥i?</h2>
          <div className="benefits-grid">
            <div className="benefit-card">
              <h3>Hoa T∆∞∆°i Ch·∫•t L∆∞·ª£ng</h3>
              <p>Ch√∫ng t√¥i s·ª≠ d·ª•ng 100% hoa t∆∞∆°i t·ª± nhi√™n ƒë·ªÉ t·∫°o ra nh·ªØng m·∫´u hoa ƒë·∫πp nh·∫•t. D·ªãch v·ª• c·ªßa shop hoa t∆∞∆°i Ho√†ng Anh nh·∫≠n b√≥ hoa, c·∫Øm hoa theo y√™u c·∫ßu c·ªßa kh√°ch h√†ng.</p>
            </div>
            <div className="benefit-card">
              <h3>ƒê·ªôi ng≈© Chuy√™n Nghi·ªáp</h3>
              <p>Shop hoa Ho√†ng Anh r·∫•t h·∫°nh ph√∫c khi c√≥ ƒë·ªôi ng≈© th·ª£ c·∫Øm hoa tay ngh·ªÅ cao, nh√¢n vi√™n t∆∞ v·∫•n nhi·ªát t√¨nh, s√°ng t·∫°o v√† c√≥ nh·ªØng t√°c ph·∫©m ngh·ªá thu·∫≠t c·∫Øm hoa ƒë·∫∑c s·∫Øc, ·∫•n t∆∞·ª£ng v√† ƒë·ªôc ƒë√°o.</p>
            </div>
            <div className="benefit-card">
              <h3>Giao H√†ng Nhanh Ch√≥ng</h3>
              <p>Giao trong v√≤ng 2 gi·ªù n·ªôi th√†nh</p>
            </div>
            <div className="benefit-card">
              <h3>M·ª©c Gi√° Ph√π H·ª£p</h3>
              <p>V√¨ nh·∫≠p hoa c√≥ ngu·ªìn ·ªïn ƒë·ªãnh n√™n hoa t∆∞∆°i & m·ªõi, nh·∫≠p v·ªÅ m·ªói ng√†y. Cam k·∫øt hoa t∆∞∆°i tr√™n 3 ng√†y, b√°n hoa v·ªõi m·ª©c gi√° ph√π h·ª£p trong c√°c d·ªãp l·ªÖ, t·∫øt.</p>
            </div>
          </div>
        </div>
      </section>
    </div>
  );
};

export default Home;