// src/pages/FilterPage.jsx - Component chung cho Color v√† Style
import React, { useEffect, useState, useCallback, useRef } from 'react';
import { useParams } from 'react-router-dom';
import ProductGrid from '../components/ProductGrid';
import Pagination from '../components/Pagination';
import FilterBar from '../components/FilterBar';
import axiosClient from '../utils/axiosClient';
import { useFilter } from '../context/FilterContext';
import '../style/CategoryPage.css';

// Map cho Colors
const COLOR_MAP = {
  'cam': { id: 1, name: 'Cam', displayName: 'Hoa M√†u Cam' },
  'den': { id: 2, name: 'ƒêen', displayName: 'Hoa M√†u ƒêen' },
  'do': { id: 3, name: 'ƒê·ªè', displayName: 'Hoa M√†u ƒê·ªè' },
  'hong': { id: 4, name: 'H·ªìng', displayName: 'Hoa M√†u H·ªìng' },
  'kem': { id: 5, name: 'Kem', displayName: 'Hoa M√†u Kem' },
  'tim': { id: 6, name: 'T√≠m', displayName: 'Hoa M√†u T√≠m' },
  'trang': { id: 7, name: 'Tr·∫Øng', displayName: 'Hoa M√†u Tr·∫Øng' },
  'vang': { id: 8, name: 'V√†ng', displayName: 'Hoa M√†u V√†ng' },
  'xanh-la': { id: 9, name: 'Xanh L√°', displayName: 'Hoa M√†u Xanh L√°' }
};

// Map cho Styles
const STYLE_MAP = {
  'binh': { id: 1, name: 'B√¨nh', displayName: 'Hoa B√¨nh' },
  'bo': { id: 2, name: 'B√≥', displayName: 'Hoa B√≥' },
  'gio': { id: 3, name: 'Gi·ªè', displayName: 'Hoa Gi·ªè' },
  'hoa-cuoi': { id: 4, name: 'Hoa C∆∞·ªõi', displayName: 'Hoa C∆∞·ªõi' },
  'hoa-de-ban': { id: 5, name: 'Hoa ƒê·ªÉ B√†n', displayName: 'Hoa ƒê·ªÉ B√†n' },
  'hop-hoa': { id: 6, name: 'H·ªôp Hoa', displayName: 'H·ªôp Hoa' },
  'ke': { id: 7, name: 'K·ªá', displayName: 'Hoa K·ªá' },
  'lang': { id: 8, name: 'L·∫µng', displayName: 'Hoa L·∫µng' }
};

// Helper function
const getPriceRangeValue = (minPrice, maxPrice) => {
  if (!minPrice && !maxPrice) return '';
  if (!minPrice && maxPrice === 500000) return 'under500';
  if (minPrice === 500000 && maxPrice === 700000) return '500to700';
  if (minPrice === 700000 && maxPrice === 1000000) return '700to1000';
  if (minPrice === 1000000 && !maxPrice) return 'above1000';
  return '';
};

const FilterPage = ({ addToCart, filterType }) => {
  const params = useParams();
  const { filters, setFilters } = useFilter();

  // L·∫•y slug t·ª´ params d·ª±a tr√™n filterType
  const slug = filterType === 'color' ? params.colorSlug : params.styleSlug;
  
  // Ch·ªçn map ph√π h·ª£p
  const dataMap = filterType === 'color' ? COLOR_MAP : STYLE_MAP;
  const filterInfo = dataMap[slug];
  
  const title = filterInfo?.displayName || 'Hoa';
  const filterParam = filterType === 'color' ? 'color' : 'style';

  const [page, setPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [resetSignal, setResetSignal] = useState(false);
  const isInitialMount = useRef(true);

  // Reset filters khi ƒë·ªïi filter
  useEffect(() => {
    console.log(`üîÑ ${filterType} changed:`, slug);

    setFilters({ searchText: '', minPrice: null, maxPrice: null });
    setResetSignal(prev => !prev);
    window.scrollTo(0, 0);
  }, [slug, setFilters, filterType]);

  // Reset page khi filters change
  useEffect(() => {
    setPage(1);
  }, [filters.searchText, filters.minPrice, filters.maxPrice]);

  // Fetch products
  useEffect(() => {
    if (!filterInfo) {
      setError(`${filterType === 'color' ? 'M√†u s·∫Øc' : 'Ki·ªÉu d√°ng'} kh√¥ng h·ª£p l·ªá`);
      setLoading(false);
      return;
    }

    if (isInitialMount.current) {
      isInitialMount.current = false;
    }

    setLoading(true);
    setError(null);

    const query = new URLSearchParams();
    query.append(filterParam, filterInfo.id);
    query.append('page', page);
    if (filters.searchText) query.append('name', filters.searchText);
    if (filters.minPrice) query.append('minPrice', filters.minPrice);
    if (filters.maxPrice) query.append('maxPrice', filters.maxPrice);

    console.log(`üì° Fetching products with ${filterType}:`, {
      slug,
      id: filterInfo.id,
      page,
      filters,
      queryString: query.toString()
    });

    axiosClient
      .get(`/api/products/filter?${query.toString()}`)
      .then(res => {
        console.log('‚úÖ Products received:', res.data);
        
        const productsData = res.data.products || [];
        const paginationData = res.data.pagination || res.data;
        
        setProducts(productsData);
        setTotalPages(paginationData.totalPages || 1);
        setLoading(false);
      })
      .catch(err => {
        console.error(`‚ùå L·ªói khi l·∫•y s·∫£n ph·∫©m theo ${filterType}:`, err);
        setError('Kh√¥ng th·ªÉ t·∫£i s·∫£n ph·∫©m. Vui l√≤ng th·ª≠ l·∫°i sau.');
        setLoading(false);
      });
  }, [page, filters.searchText, filters.minPrice, filters.maxPrice, slug, filterInfo, filterParam, filterType]);

  const handleFilterChange = useCallback(({ searchText, minPrice, maxPrice }) => {
    console.log(`üîç FilterPage handleFilterChange:`, { searchText, minPrice, maxPrice });
    setFilters({ searchText, minPrice, maxPrice });
  }, [setFilters]);

  const handlePageChange = useCallback((newPage) => {
    setPage(newPage);
    window.scrollTo({ top: 0, behavior: 'smooth' });
  }, []);

  if (loading && isInitialMount.current) {
    return (
      <div className="category-page">
        <div className="loading-container">
          <div className="loading-spinner"></div>
          <p className="loading-text">ƒêang t·∫£i s·∫£n ph·∫©m...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="category-page">
        <div className="error-container">
          <div className="error-icon">‚ö†Ô∏è</div>
          <p className="error-text">{error}</p>
          <button className="retry-btn" onClick={() => window.location.reload()}>
            üîÑ Th·ª≠ l·∫°i
          </button>
        </div>
      </div>
    );
  }

  const currentPriceRange = getPriceRangeValue(filters.minPrice, filters.maxPrice);

  return (
    <div className="category-page">
      {/* Header */}
      <div className={`category-header category-header-${filterType}`}>
        <div className="category-header-overlay"></div>
        <div className="category-header-content">
          <h1 className="category-title">{title}</h1>
          <p className="category-description">
            {filterType === 'color' 
              ? `Kh√°m ph√° b·ªô s∆∞u t·∫≠p hoa ${filterInfo?.name.toLowerCase()} ƒë·∫πp nh·∫•t`
              : `Kh√°m ph√° b·ªô s∆∞u t·∫≠p ${filterInfo?.name.toLowerCase()} ƒë·ªôc ƒë√°o`
            }
          </p>
        </div>
      </div>

      {/* Filter Bar */}
      <div className="category-content">
        <div className="container">
          <div className="category-filter-section">
            <FilterBar
              key={`filter-${slug}-${resetSignal}`}
              onFilterChange={handleFilterChange}
              initialSearch={filters.searchText || ''}
              initialPrice={currentPriceRange}
              resetSignal={resetSignal}
            />
          </div>

          {/* Loading State */}
          {loading && !isInitialMount.current ? (
            <div className="loading-inline">
              <div className="loading-spinner-small"></div>
              <p>ƒêang t√¨m ki·∫øm...</p>
            </div>
          ) : products.length === 0 ? (
            <div className="no-products">
              <div className="no-products-icon">üîç</div>
              <h3>Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m</h3>
              <p>Vui l√≤ng th·ª≠ t√¨m ki·∫øm v·ªõi t·ª´ kh√≥a kh√°c ho·∫∑c ƒëi·ªÅu ch·ªânh b·ªô l·ªçc</p>
            </div>
          ) : (
            <>
              <ProductGrid products={products} addToCart={addToCart} />

              {totalPages > 1 && (
                <div className="pagination-wrapper">
                  <Pagination
                    currentPage={page}
                    totalPages={totalPages}
                    onPageChange={handlePageChange}
                  />
                </div>
              )}
            </>
          )}
        </div>
      </div>
    </div>
  );
};

export default FilterPage;